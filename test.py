'''code to execute sql queries by Andi Dai 05/09'''
import sqlite3
#importing
      
def sandslash():
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKkx0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkl:;. :XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXxc;;lkKd.:XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl;:d0NWMWx.cNMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxlcl0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMNkc:o0WMMMMMWd.lNMWKxlkWMMMMMMMMMMMMMMWN0kxl:;:cc' lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMWWWMMNOccxXWMMMMMMMWo.dXOl;. ,KMMMMMMMMMMMWKxc;,;:okKNWWl.lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx::OWKockNMMMMMMMMMMNl.,:;o0k..0MMMMMMMMWKd:,;lkKNWMMMMMX:.dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o::,.cdcdXWMMMMMMMMMMW0,.;xXMMK,.kMMMMMWXx:,;oONMMMMMMMMMM0''OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl;l0NO',:OWMMMMMMMMMMW0l,:kNMMMMN:.dWMMW0l,,lONMMMMMMMMMMMMWo.cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXdoKWMMMMMMMXd,:OWMMNc.xWMMMMMMMMMW0l,cONMMMMMMWo.oWNOc,:kXWMMMMMMMMMMMMMM0''OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO:;;:kWMMMMWO:,xNMMMMWx.oWMMMMMMMWKl,cONWMMMMMMMWx.:kc;o0WMMMMMMMMMMMMMMMMXc.dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx;oXNd;xNMMNo,c0WMMMMMM0,;XMMMMMMXo,:OWMMMMMMMMMMMO..;oKWMMMMMMMMMMMMMMMMMNd.cNMMMMMMMMMMMWNXKOkxxdooolllllooxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd'oNMMWx;dNKc'dNMMMMMMMMNc'OMMMMNx;:kNMMMMMMMMMMMMM0'.kWMMMMMMMMMMMMMMMMMMWx':KMMMMWNX0kdlc:;;;;;::ccllloooo:..xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXXWMMMMMMMMMMWk'cXMMMMWk:c;;kWMMMMMMMMMMx'dWMWOc;xXMMMMMMMMMMMMMMMX;.0MMMMMMMMMMMMMMMMWMWk,;0MNKkoc::::codk0KXNWWMMMMMMMMWk,'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMO,,coONMMMMMMMK;.0MMMMMMNl.:KWMMMMMMMMMMMK;cNXo;oKWMMMMMMMMMMMMMMMMNc.kMMMMMMMMMMMMMMMMMWO''ldlcclox0KNWMMMMMMMMMMMMMMMMW0c.,OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMNl.lkc,;lONMMMWd.oWMMMMMWk,cXMMMMMMMMMMMMMNl,ocl0WMMMMMMMMMMMMMMMMMMWo.xMMMMMMMMMMMMMMMWNk,.;odOXWMMMMMMMMMMMMMMMMMMMMMMXo..lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMK;.OMWKx:';xXWX:.0MMMMMWk;lXMMMMMMMMMMMMMMMx.,xNMMMMMMMMMMMMMMMMMMMMWd.dWMMMMMMMMMMMMMNx:,l0NMMMMMMMMMMMMMMMMMMMMMMMMMNx,.;OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMM0''OMMMMN0l';xO;cNMMMMWk;lNMMMMMMMWXNWMMMMM0x0WMMMMMMMMMMMMMMMMMMMMMMk.lWMMMMMMMMMMMWKl;cxNMMWWWMMMMMMMMMMMMMMMMMMMMNk;.,xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMO..0MMMMMMW0l...oWMMMWO;lXMMMMMMWKo,.0WMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMO'cNMMMMMMWNXOko'.,cclccllllllkWMMMMMMMMMMMMMNk:.'dXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMM0'.0MMMMMMMMWO;.lNMMW0:cXMMMMMMXd:ld;.0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0,:NMWX0dl:;;;:cloddxkOOOO0o..xWMMMMMMMMMMWNk;.;xXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMK;.0MMMMMMMMMMXl,dNMKc:KMMMMMWOccOWWO':KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;;kdc;;:lx0XNWMMMMMMMMMMWk'.dNMMMMMMMMMWXx;,ckNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMNc.kMMMMMMMMMMMNd,xXl;OMMMMMXo;oXMMMWo.oNMMMMMMMMMMMMMMMMMMMMMMMMMMMWO'.':oOXWMMMMMMMMMMMMMMMXl..xNMWNXKOkxdoc' .,cllllooooodxxkO0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMWWNNXXXNNNWWWMMMWx'oWMMMMMMMMMMMNd;;;xWMMMW0:,kWMMMMMK;.kMMMMMMMMMMMMMMMMMMMMMMMMMNOc';dKWMMMMMMMMMMMMMMMMMWO; .;olc:;;;;:ccloodxkkOOOOOOOOkkkd;.:KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMWk::oooooooooooddkx,:XMMMMMMMMMMMMNc.lNMMMWO,;OWMMMMMMWx.;KMMMMMMMMMMMMMMMMMMMMMMWk:':ONMMMMMMMMMMMMMMMMMMWXo. .;cldxO0XNNWMMMMMMMMMMMMMMMMMMNO:.,oddollllcccccllloodxkO0KXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMO'.0WWWWNNNXKKOkxd::xWMMMMMMMMMMMNl.0MMMWk'.0MMMMMMMMMX:.dWMMMMMMMMMMMMMMMMMMMWKc':OWMMMMMMMMMMMMMMMMMMNXk,..dXWMMMMMMMMMMMMMMMMMMMMMMMMMWXxc;;cllooooddddddooollc::;;,,,;;:cldk0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMWk,cXMMMMMMMMMMMMMNoc0MMMMMMMMMMMO,;ONWWO''OWMMMMMMMMMWx.;XMMMMMMMMMMMMMMMMMWNk,,xNMMMMMMMMMMMMMMMMMMW0c'..lKWMMMMMMMMMMMMMMMMMMMMMMMMMNOl;ckXWWWMMMMMMMMMMMMMMMMMMWWWNXKKOkdolccccld0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMWk,cKWMMMMMMMMMMMMXolKMMMMMMMMMWxcollkO;.xWMMMMMMMMMMMK,.kMMMMMMMMMMMWX0kddo;'cKMMMMMMMMMMMMMMMMMMWKo..'cOWMMMMMMMMMMMMMMMMMMMMMMMMN0o;;l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXk:..oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMWO;;kWMMMMMMMMMMMMXolKMMMMMMMMWNNWWOc..lNMMMMMMMMMMMMNl.lWMMMMMWN0xoooddkkc,dNMMMMMMMMMMMMMMMMMWKo'.cOXWMMMMMMMMMMMMMMMMMMMMMMMWKd;,:xKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOoc:cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMWKc,lKWMMMMMMMMMMMNxlkNWMMMMMMMMMMMk..0MMMMMMMMMMMMMMx.;XMMWKxoooxOXWWMWOlOWMMMMMMMMMMMMMMMMNOc',l0WMMMMMMMMMMMMMMMMMMMMMMMN0o;';o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdlccoOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMNk;;dXWMMMMMMMMMMW0olxXWMNXWMMMMWd.cNMMMMMMMMMMMMMMO.,OKxlldONWMMMMWWWKKWMMMMMMMMMMMWWMNKd;,:xXWMMMMMMMMMMMMMMMMMMMMMWXOo;',oONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdlccokXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMXx;;dKWMMMMMMMMMMW0dloooOMMMMMWl.dWMMMMMMMMMMMMMMK,.;ld0NWMMMMMMMMMMMMMMMMMMMMMMMWXOoc:cxKWMMMMMMMMMMMMMMMMMMMMMN0xc,,:d0NWMMMMMMMMMMMMMMWWNNNNNNWWWMMMMMNKkollldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMNkc:lkXWMMMMMMMMWXx,.cNMMMMMWl.oWMMMMMMMMMMMMMM0'.xNMMMMMMMMMMMMMMMMMMMMWNXKOxoooodONWMMMMMMMMMMMMMMMMMMMWN0xl:::okXWMMMMMMMMMMWX0kdlc:;;,,,,,,,,;:cll:,,:d0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMWKxllox0XWWN0dlc;.'OMMMMMMMx.cNMMMMMMMMMMMMMWd.lNMMMMMMMMMMMMMMMWWWMMNOkkxl..0NMMMMMMWNXKOxdooollllllll:'.'cxKWMMMMMMMMWWKkdlcccccloddxxxxxxxdoolc:;,'',;:ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:;;cccokKk,oNMMMMMMMX;.0MMMMMMMMMMMMWk,cXMMMMMMMMMMWN0kollONMWN0Okkc.lWMMWN0koolllllloooddddoollc:;::::cldk0NN0xolloxOKNWWMMMMMMMMMMMMMMMMMMWWNX0Oxol:::cokKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMWWX0kdollldOXWMMWo,OMWMMMMMMWk,oNMMMMMMMMMMNx;oXMMMMMMMWNOo:'.   cXXOxxxk0Xo.oNXkolodk0XNWMMMMMMMMMMMMMMMMWWXK0kxolll:..lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0x,..kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMNOxoooodx0XWMMMMMMMWd,xWMMMMMMMMNd;OMMMMMMMMWKocOWMMMMMMWOl'.       ,dxkKNWMMWo.;oodOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdooodONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc,;dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMWKo:cdOXWMMMMMMMMMMMMMMK;'d0NMMMMMMMNdoXMMMMMMNkoxXMMMMMMWO:.          ;0WMMMMMMNc.;kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXo.,0MMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc,,lONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMNx',xNWMMMMMMMMMMMMMMMMMWx. .;kNMMMMMMWXNMMMMMWKOXWMMMMMMXl':ko.        dWMMMMMMMX;.OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l,c0WMMMMMMMMMMMMMMMMMMMMMMMMMWXxc,,ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMWx.;KMMMWX000KNWMMMMMMMMMMk.  .'oXMMMMMMMMMMMMMMWMMMMMMMM0:'xNMX:       .OMMMMMMMMO',KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOc':kNMMMMMMMMMMMMMMMMMMMMMMMMN0dc;;lOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMX:.xWWMNd;:odoooxKWMMMMMMMO.  ;kllKMMMMMMMMMMMMMMMMMMMMMK:,kWMMNc       cXMMMMMMMWx.cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKx;,cONMMMMMMMMMWNX0Okxddooooodoc,.'cxKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMWO,'looo;'oXMMWNOocdKWMMMMMX:  :XXlcKMMMMMMMMMMMMMMMMMMMWd,xWMMWO'      ,OMMMMMMMMNc.oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkc,;o0WMMMMMWXOxdolllllllllllllcc:;,,',,,,:coxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMNx;lKNXx.'kWMMMMMMWKo:kNMMMMWk. .dNKclNMMMMMMMMMMMMMMMMMMX:;0WWNk'      ,OWMMMMMMMM0'.OMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMWKxc;;lONMMWMWKkdooddk0KNWWMMMMMMMMMMMMWWNXK0kxoc;,'',:ox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMXl'oNMWK:,kWMMMMMMMMMNx;xWMMMMWk' .l0o,kWMMMMMMMMMMMMMMMMM0, .;:'      .lKMMMMMMMMMWo.cXMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkl;';oONWMMMN0doodOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOdl;'',cd0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMKc'dNMMXc,kWMMMMMMMMMMMWd:OMMMMMKc.. .. cXMMMMMMMMMMMMMMMMM0'        .;dKWMMMMMMMMMMO'.lKNWMMMMMMMMMMMMMMMMMMWWX0koc;;;;..ckXWMW0dclxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xc;',ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMXc.dNMMNo'xWMMMMMMMMMMMMMXclNMMNk:l0x. ..,KMMMMMMMMMMMMMMMMMXc'cooodxOKWMMMMMMMMMMMMK:  .,:cloodxkOOOOOkkxdoolc:;;:cdOKWWXkl::cl:':ONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKxc;;ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMNl.lNMMWx'lNMMMMMMMMMMMMWNk:oXXkc;dNMNl.l:;KMMMMMMMMMMMMMMMMNko0WMMMMMMMMMMMMWWMMMWNk,.:x0KK0Oxc. .:cccccccllodxOKNWMMMMMMMMMNKkdc;::ldOXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0d;,oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMWx.:XMMM0;:KMMMMMMMMMMMMWO:.,cc;:dKWMMMO':l.0MMMMMMMMMMMMMMMXddXWMMMMMMMMMMMMMMWWXOo;..oNMMMMMMMWKc.lXWWWWWMMMMMMMMMMMMMMMMMMMMMMMMNKOdl:::cd0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd;'lKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMK,'OMMMNl'kMMMMMMMMMMMWKocoxxxk0NMMMMMMNc,l:kMMMMMMMMMMMMMWKdkNMMMMMMMMMMMMWN0kolc:'. :XMMMMMMMMMMXc.xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdc;;cd0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xlc:cxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMWo.oWMMMk,lNMMMMMMMMMMNk:lKWMMMMMMMMMMMMMk,ccxWMMMMMMMMMMMW0okNMMMMMMMMWX0xolclox0XWO'.kMMMMMMMMMMMMx.cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:,;o0NMMMMMMMMMMMMMMMMMMMMMMMMMWWX0kdl:::coOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMK;.0MMMNc.0MMMMMMMMMMKl:kNMMMMMMMMMMMMMMMX:;odXMMMMMMMMMMWOoOWMMMMMWXkolclox0XWMMMMWo.:XMMMMMMMMMMMMO.;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKx:';dKNNWWWWWMWWWWWNNXK0Okdol:;;;;..'oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMx.lNMMMk'lNMMMMMMMMWO:c0WMMMMMMMMMMMMMMMMWk;lxx0XWMMMMWN0ol0WMMMMNOllox0XWMMMMMMMMWO, ;xO0XNWMMMMMMMO.;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l,.'codollllccc:::;;'..:loxOKXNXOoc:lkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMNl.kMMMNl'OMMMMMMMMNd;dXMMMMMMMMMMMMMMMMMMMWOclxkkkkkxxxxxOXMMMWKdclkNWMMMMMMMMMMNkc,,;:;;;;;cd0NMMMMk.;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd'.:kKK0000O000KKKOo:cxXWMMMMMMMN0d:;ckXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMX;.0MMM0,:XMMMMMMWKc;kWMMMMMMMMMMMMMMMMMMMMMMXd:o0NXXKXXWMMMWXkc':OWMMMMMMMMMMMWk:;l0NWWWNNKOdc;:dXWWx.;KMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo..oXWMMMMMMMMMMMWNkc;l0WMMMMMMMMNOc,;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMK,:XMMMx.oWMMMMMW0::.0WMMMMMMMMMMMMMMMMMMMMMMMMWKdcldkO000Okoc:co;cXMMMMMMMMMMWKl;oKWMMMMMMMMMMWXx;;kXo.'cd0WMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:.,kWMMMMMMMMMMMMMNOc,cOWMMMMMMMMWKo,'l0WWMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMM0,cNMMWl.xMMMMMWk;lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdolllllodOXWWo,OMMMMMMMMMNx;c0WMMMMMMMMMMMMMMMXl,l,.d0dclONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd..lXWMMMMMMMMMMMMMW0c,c0WMMMMMMMMWXd''lKWMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMM0,cNMMX:'OMMMMNd;dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWMMMMMMMk'lNMMMMMMWOc;xNMMMMMMMMMMMMMMMMMMNo. .OMMXkllkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMW0;..0WMMMMMMMMMMMMMMWO:'lKWMMMMMMMMMXo''oXMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMK;cXMNo.,KMMMXo;kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,.OWMMMW0l,lKWMMMMMMMMMMMMMMMMMMMM0, ;XMMMMNOl:ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl.'kWMMMMMMMMMMMMMMMNx''xNMMMMMMMMMW0c.,OWMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMNc;KNo'.,KMMKc:OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo.:XWXx:,cOWMMMMMMMMMMMMMMMMMMMMMMWl.oWMMMMMMNXOccOWMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo..xWMMMMMMMMMMMMMMMWKc.:OWMMMMMMMMMNx'.oXMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMWd;xo:o,,KW0ccKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk..;c;;o0WMMMMMMMMMMMMMMMMMMMMMMMMWd'kMMMMMMMMMMNkcoKWXdOMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd..xWMMMMMMMMMMMMMMMMNd..dNMMMMMMMMMWK:.:0WMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMO,..0K;.0O:lXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkl:;;cokKNWMMMMMMMMMMMMMMMMMMMMMMMMMMWd'kMMMMMMMMMMMWXocxl;OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd..kWMMMMMMMMMMMMMMMMWO,.cKMMMMMMMMMMNd.,OWMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMNoc0WNc.:;oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;',cx0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo,OMMMMMMMMMMMMMWO;.:XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl.,0MMMMMMMMMMMMMMMMMM0;.;0WMMMMMMMMMWk''kWMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMNNMMWo..dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;..ckXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc.0MMMMMMMMMMMMMMWd.oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; cNMMMMMMMMMMMMMMMMMMK:.'xKNWMMMMMWMWO,'OWMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMM0cxNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc.'oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;cNMMMMMMMMMMMMMMNc'OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk..kWMMMMMMMMMMMMMMMMMMXc  ':clxOKNWMMWO,,0MMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc.:KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx'dWMMMMMMMMMMMMMMK,,KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc ,OWMMMMMMMMMMMMMMMMMMK: 'xko:;,;:ldk0l.:XMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXOl..ldxkO0XWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc.0MMMMMMMMMMMMMMMO.;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx. .cxKWMMMMMMMMMMMMMMMM0, cNMWNKOdl:;,'.;0MMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNXOxolllloxO0OkxdoolooxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'lNMMMMMMMMMMMMMMWd.cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0' cd;,:xKWMMMMMMMMMMMMMMk..kWMMMMMMWNXKKXWMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0xolccloxOKNMMMMMMMMMMWX0kdollox0NWMMMMMMMMMMMMMMMMMMMMMMK;'OMMMMMMMMMMMMMMMWo.lWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; cNNOc,';lkKWMMMMMMMMMMWo.:XMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxolcclodOKNWMMMMMMMMMMMMMMMMMMMMWNKkdlcokXWMMMMMMMMMMMMMMMMMMNo.oWMMMMMMMMMMMMMMMWl.lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc ,KMMWXkl;..;lkKNMMMMMMMK;'OMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNKOdlc::cldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo''xWMMMMMMMMMMMMMMMMWx.:XMMMMMMMMMMMMMMMMWl.cNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc  ,xXWMMMN0xc,.',cdOKNMMWd'dWMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMWNX0xoc:;;:cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl cNMMMMMMMMMMMMMMMWx..0MMMMMMMMMMMMMMMMMWd.:XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc .:',oKWMMMMMWKOdc;,,;cldc.oWMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMWX0kol:;;;:ldk0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx.'OWMMMMMMMMMMMMMMNx.,OWMMMMMMMMMMMMMMMMMWk..0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: :XKo,'ckXWMMMMMMMWNKOxolcl0WMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMW0c.  .:x0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNO:..:kKNWMMMMMMMMMMMXo.,OWMMMMMMMMMMMMMMMMMMM0'.xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, lWMMXk:',lONWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMWXOxoc:::cldk0KNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0d;.'oxdl:;oKMMMMMMMMW0;.:KWMMMMMMMMMMMMMMMMMMMMNl.;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO..xMMMMMWKd:';lkXWMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMWNKOxl:;,'',:cldxkO0KXNNWWMMMMMMMMMMMMMMMMMMMWWNKkl,..;xXWMMMK;.kMMMMMMWKl..oNMMMMMMMMMMMMMMMMMMMMMMM0,.oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo..0MMMMMMMMWKxc;,:oOXNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMXdc:::ccccc:;,,;;:::;,,,,,,;;:ccllooooddddddooll:;,'';cxKWMMMMWKl.lXMMMMN0l'..'cdOXWWMMMMMMMMMMMMMMMMMMMWk'.xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK, lNMMMMMMMMMMMWN0dc:;:cdkKXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMNkl;'.,cdk0XNWWWWMMWNNXK0Okxdoollcc:::::::::cclodxk0XWMMMMMMWXd,,xNMWN0d;.'lOKkoc:::cldkO0KXNNNNWWNNNXXK0k:..dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo..0MMMMMMMMMMMMMMMMMNKkdlc::ccloxkkO00KKKKK0OOkkxxdolxNMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMWN0kdooooodkOKXNWWMMMMMMMMMMMMMMMMWWWWWWMMMMMMMMMMMMMWNKkc'.ckOkoc,.':xXWMMMMWNKOxdllcccccllllllc,''.,loo:':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx..kWMMMMMMMMMMMMMMMMMMMMMMWNX0kxdoooooooooooddoddddc..lXMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMWWX0OxdolllllllloddxxkOO00KKKKKKKKKKKKK0OOkxdoolc;,...','..'cdOXWMMMMMMMMMMMMMMMWWNNNXX0xol;:okd:oKWW0c,ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx..xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd,;xNMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWXK0Okdoollc::::::::::::::::::cccccloodkOKK0000Oo;':okKNWWMMMMMMMMMMMMWWNKOxoc:cloONMMW0:.0WMW0l,;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl..,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOl,;xXMMMMWMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWNNNNNNNNNNNNNWWWWMMMMMMMMMMMMWN0dllooccccllodddddddolcc::::cokKWMMMMMMMMk'cXMMMWKd:,cxKNMMMMMMMMMMMMMMMMMMMMMMMMWKd,'l0kc,l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKxc,,ckNMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXd::dKWMMWNX0kxdooolllooodxO0XNWMMMMMMMMMMMWx.;KMMMMMMN0o;,;lkKNWMMMMMMMMMMMMMMMMNKxc,,oKWMMNk;'oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOdc;,,ckXWMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd'.dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx'.dWMMMMMMMMMN0xc;'';loxO00KKKK0Okxoc:;:lkXWMMMMMMXo.;OWMMMMMMMMMMMMMMMMMMMMWNX0kdl:,,,;lx0NWMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOdoooookXNKkkkOKWMMMMMMMMMMMMMMMMMMMMMMMMMMWXk:.;kWMMMMMMMMMMMMWXd,;llc::;;:::::::cldOXWMMMMMMMMMMMWd.'dkkO000KK0000Okxdolc:;,,,,;cox0XWMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXdcoONMMW0:,:ldkkxdokNMMMMMMMMMMMMMMMMMMMWXK0dc;;lONMMMMMMMMMMMMMNk;,dXWMMWWNNNNNNNWWMMMMMMMMMMMMMMMMMMK,.:llccc::::;;;;;;:ccloxk0KNWMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd:l0WMMMXxc;o0WMMMMWOcl0WMMMMMMMMMMMMWXOxoc::cld0NWMMMMMMMMMMMMMWKc..0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.cXMMWWWWNNNNNNWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx;cOWMMMXx::xXWMMMMMWMMXc:KMMMMMWNKOxolcccldOXNWMMMMMMMMMMMMMMMMMM0;..0WWMMMMMMMMMMMMWWNNWMMMMMMMMMMMMMMNo'cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:;xNMMMNk::xNMMWMMMMMMWN0:.lkxdoollllldk0XWMMMMMMMMMMMMMMMMMMMMMMWXc..lxddxONMMMMMMW0xodxkxxkKWMMMMMMMMW0:'oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx,.0XK0kd:;dXMMMMMMWX0xocccccloodxOKXWWMMMMMMMMMMMMMMMMMMMMMMMMMMWKo::o0NWNKklcdKWWXxc:oONWWNKxooOWMMMMWKl':OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo..:oool'..0WMWX0kdlcccldOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l,;xXMMMMMMMW0:;oo;;xXWMMMMMMMNkcoKMW0l,;xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxdk0XNXo,lOOxolccldk0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0c';xNMMMMMMMMMMMO'.,dXMMMMMMMMMMMW0:;l:,:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo.'clldk0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKl',dXMMMMMMMMMMMNx,,dXWMMMMMMMMMMWXkc'.;o0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd''oXWMMMMMMMMWXOd;'cKWMMMMMMMMWN0dc;;lkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:'lKWMMMMWX0koc:,. ;OWMMMMMMWN0dc;;:d0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx,:ONNXOxdlccccoxx;'oXWMMMWXOdc;;coOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx..lddoooodk0XWWMKc;kWWNKxlc::ld0XWMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOdxk0KNWMMMMMMMMX:'okdlccldkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk;;loxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
    print("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM") 

DATABASE = 'pokemon.db'

ADMIN_USERNAME = 'OSS'
ADMIN_PASSWORD = 'BOSS'
STOP_CMD = 'stop'
BACK_CMD = 'back'
DATABASE = 'pokemon.db'
YN = ['y', 'n']


def admin_login(admin):
    username = input("Please enter username(OSS): ")
    password = input("Please enter password(BOSS): ")
    
    if username.upper() == ADMIN_USERNAME and password.upper() == ADMIN_PASSWORD:
        print("Login successful!")
        return True
    else:
        print("Invalid credentials. Access denied.")
        return False

def print_databaseinfo():
    with sqlite3.connect(DATABASE) as conn:
        cur = conn.cursor()
        if not cur:
            raise Exception('Connection failed.')
        cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cur.fetchall()

        print("Database tables:")
        for table in tables:
            table_name = table[0]
            print(f"Table Name: {table_name}")
            cur.execute(f"PRAGMA table_info('{table_name}');")
            columns = cur.fetchall()
            print("Columns:")
            print("+------+-----------------+---------------+---------------+")
            print("| ID   | Name            | Type          | Nullable      |")
            print("+------+-----------------+---------------+---------------+")
            for column in columns:
                col_id = column[0]
                col_name = column[1]
                col_type = column[2]
                nullable = 'YES' if column[3] else 'NO'
                print(f"| {col_id:<4} | {col_name:<15} | {col_type:<13} | {nullable:<13} |")
            print("+------+-----------------+---------------+---------------+")
                


def custom_query(query):
    with sqlite3.connect(DATABASE) as conn:
        cur = conn.cursor()
        if not cur:
            raise Exception('Connection failed.')
        try:
          cur.execute(f"?", (query,))
        except sqlite3.OperationalError as e:
            print(f"Error:", e)
            conn.rollback
    
def get_table_definition(DATABASE, table):
    with sqlite3.connect(DATABASE) as conn:
        cur = conn.cursor()
        if not cur:
            raise Exception('Connection failed.')
        cur.execute(f"PRAGMA table_info('{table}')")
        table_info = cur.fetchall()
        if table_info:
            print(f"Table '{table}' definition:")
            for column in table_info:
                print(f"Column ID: {column[0]}, Name: {column[1]}, Type: {column[2]}, Not Null: {column[3]}, Default Value: {column[4]}, Primary Key: {column[5]}")
        else:
            print(f"Table '{table}' does not exist.")

def ask_for_table_input():
    print("You will now be asked to input some info for the table you are creating (type 'stop' at anytime to cancel table creation)")
    table = input("Enter table name: ")
    if table.lower() == STOP_CMD:
        print("Cancelling table creation.")
        return None, None
    

    columns = {}
    primary_key = False
    
    while True:
        col_name = input("Enter column name (leave blank to finish or type 'back' to delete last column: ")
        if col_name.lower() == STOP_CMD:
            print("Cancelling table creation.")
            return None, None
        elif col_name.lower() == BACK_CMD:
            if columns:
                print("Reversing last change.")
                columns.popitem()  # Remove the last column added
                continue
            else:
                print("No previous step to go back to.")
                continue
        elif not col_name:
            break

        col_def = input(f"Enter data type for column '{col_name}': ").upper()
        if col_def.lower() == STOP_CMD:
            print("Cancelling table creation.")
            return None, None
        while col_def.lower() not in ['int', 'integer', 'text', 'real', 'blob']:
            print("Invalid data type.\nTypes allowed are: INT, INTEGER, TEXT, REAL, BLOB")
            col_def = input(f"Enter data type for column '{col_name}': ")
            if col_def.lower() == STOP_CMD:
                print("Cancelling table creation.")
                return None, None

        allow_null = input(f"Should column '{col_name}' allow null values? (Y/N): ")
        if allow_null.lower() == STOP_CMD:
                print("Cancelling table creation.")
                return None, None
        while allow_null.lower() not in YN:
            print("Invalid input. Please enter 'Y' or 'N'.")
            allow_null = input(f"Should column '{col_name}' allow null values? (Y/N): ")
            if allow_null.lower() == STOP_CMD:
                print("Cancelling table creation.")
                return None, None
        if allow_null.lower() == 'n':
            col_def += " NOT NULL"

        is_unique = input(f"Should column '{col_name}' be unique? (Y/N): ")
        if is_unique.lower()== STOP_CMD:
                print("Cancelling table creation.")
                return None, None
        while is_unique.lower() not in YN:
            print("Invalid input. Please enter 'Y' or 'N'.")
            is_unique = input(f"Should column '{col_name}' be unique? (Y/N): ")
            if is_unique.lower()== STOP_CMD:
                print("Cancelling table creation.")
                return None, None
        if is_unique.lower() == 'y':
            col_def += " UNIQUE"

        if not primary_key:
            is_primary_key = input(f"Is column '{col_name}' a primary key? (Y/N): \n")
            if is_primary_key.lower()== STOP_CMD:
                    print("Cancelling table creation.")
                    return None, None
            while is_primary_key.lower() not in YN:
                print("Invalid input. Please enter 'Y' or 'N'.")
                is_primary_key = input(f"Is column '{col_name}' a primary key? (Y/N): ")
                if is_primary_key.lower()== STOP_CMD:
                    print("Cancelling table creation.")
                    return None, None
            if is_primary_key.lower() == 'y':
                primary_key = True
                auto_increment = input(f"Should column '{col_name}' auto-increment? (Y/N): ").lower()
                if auto_increment == STOP_CMD:
                    print("Cancelling table creation.")
                    return None, None
                while auto_increment not in YN:
                    print("Invalid input. Please enter 'Y' or 'N'.")
                    auto_increment = input(f"Should column '{col_name}' auto-increment? (Y/N): ").lower()
                    if auto_increment == STOP_CMD:
                        print("Cancelling table creation.")
                        return None, None
                if auto_increment == 'y':
                    col_def = "INTEGER PRIMARY KEY AUTOINCREMENT"
                else:
                    col_def += " PRIMARY KEY"
     
        foreign_key = input(f"Is column '{col_name}' a foreign key? (Y/N): ")
        if foreign_key.lower()== STOP_CMD:
                print("Cancelling table creation.")
                return None, None
        while foreign_key.lower() not in YN:
            print("Invalid input. Please enter 'Y' or 'N'.")
            foreign_key = input(f"Is column '{col_name}' a foreign key? (Y/N): ")
            if foreign_key.lower()== STOP_CMD:
                print("Cancelling table creation.")
                return None, None
        if foreign_key.lower() == 'y':
            while True:
                ref_table = input(f"Enter the referenced table for the foreign key: ")
                if ref_table.lower()== STOP_CMD:
                  print("Cancelling table creation.")
                  return None, None
                ref_column = input(f"Enter the referenced column for the foreign key: ")
                if ref_column.lower()== STOP_CMD:
                    print("Cancelling table creation.")
                    return None, None
                try:
                    # Check if the referenced table and column exist in the database
                    with sqlite3.connect(DATABASE) as conn:
                        cur = conn.cursor()
                        if not cur:
                            raise Exception('Connection failed.')
                        cur.execute(f"PRAGMA table_info('{ref_table}')")
                        table_info = cur.fetchall()
                        if not any(ref_column == col[1] for col in table_info):
                            raise ValueError(f"Column '{ref_column}' does not exist in table '{ref_table}'")
                        break  
                except Exception as e:
                    print("Error:", e)
                    continue
            col_def += f" REFERENCES {ref_table}({ref_column})"
        columns[col_name] = col_def
    
    if not columns:
        print("No columns defined. Cancelling table creation.")
        return None, None
    
    return table, columns

def create_table(DATABASE, table, columns):
    if table is None or columns is None:
        print("Table creation cancelled.")
        return
    #check if table exists and drop/add new according to need
    with sqlite3.connect(DATABASE) as conn:
        cur = conn.cursor()
        if not cur:
            raise Exception('Connection failed.')
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name= ? ", (table,))
        if cur.fetchone():
            print(f"Table '{table}' already exists.")
            print("1. Drop the existing and create a new table")
            print("2. Add new columns to the existing table")
            print("3. Cancel table creation")
            userinput = input("Enter your choice (1-3): ")
            
            if userinput == '1':
                cur.execute(f"DROP TABLE IF EXISTS {table}")
                with sqlite3.connect(DATABASE) as conn:
                    cur = conn.cursor()
                    if not cur:
                        raise Exception('Connection failed.')
                    # Query to get all table names
                    cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
                    tables = cur.fetchall()
                    if tables:
                        print("List of tables currently in the database:")
                        for table in tables:
                            print(table[0])
                print(f"Table '{table}' dropped.")
            elif userinput == '2':
                for col_name, col_def in columns.items():
                    try:
                        cur.execute(f"ALTER TABLE {table} ADD COLUMN {col_name} {col_def}")
                        print(f"Column '{col_name}' added to table '{table}'.")
                    except sqlite3.OperationalError as e:
                        print(f"Error adding column '{col_name}':", e)
                        conn.rollback
                conn.commit()
                cur.execute(f"SELECT * FROM ")
                print(f"Table '{table}' updated successfully.")
                get_table_definition(DATABASE, table)
                return
            elif userinput == '3':
                print("Table creation cancelled.")
                return
            else:
                print("Invalid input. Table creation cancelled.")
    print("\nTable Name:", table)
    print("Columns:")
    for col_name, col_def in columns.items():
        print(f"- {col_name}: {col_def}")
    confirmation = input("Do you want to proceed with table creation? (Y/N): ")
    while confirmation not in YN:
        print("Invalid input. Please enter 'Y' or 'N'.")
        confirmation = input("Do you want to proceed with table creation? (Y/N): ")
    if confirmation.lower() != 'y':
        print("Table creation cancelled.")
        return None, None
    
    q_table = f'"{table}"'
    columns_def = ", ".join([f'"{col_name}" {col_def}' for col_name, col_def in columns.items()])
    sql = f'''CREATE TABLE {q_table} ({columns_def});'''
    with sqlite3.connect(DATABASE) as conn:
        cur = conn.cursor()
        if not cur:
            raise Exception('Connection failed.')
        else:
            try:
                cur.executescript(sql)
                conn.commit()
                print(f"Table '{table}' created successfully.")
            except sqlite3.Error as e:
                print("An error occurred:", e)
                conn.rollback()










def add_data():
    pass
    
#function to fetch all data    
def fetch_all_data():
    with sqlite3.connect(DATABASE) as conn:
        cur = conn.cursor()
        if not cur:
            raise Exception('Connection failed.')
        else: print("Connected")
        
        sql = '''SELECT p.id, p.name, p.total_stat, p.hp, p.atk, p.def, p.sp_atk, p.sp_def, p.spd, p.gen, p.legend, t1.name, t2.name 
                 FROM pokemon p 
                 JOIN type as t1 on p.type_1 = t1.type_id 
                 LEFT JOIN type as t2 on p.type_2 = t2.type_id;'''
        cur.execute(sql)
        results = cur.fetchall()
        #print the results
        print_table(results)



# Function to print data 
def print_table(data):  
    print("+------+---------------------------+-------------+-----+-----+-----+--------+--------+-----+-----+--------+----------+----------+")
    print("|  ID  |            Name           | Total Stat  |  HP | ATK | DEF | Sp.Atk | Sp. Def| SPD | GEN | LEGEND |  Type 1  |  Type 2  |")
    print("+------+---------------------------+-------------+-----+-----+-----+--------+--------+-----+-----+--------+----------+----------+")
    
    # Data rows
    for row in data:
        type_1 = row[-2] if row[-2] else "-"
        type_2 = row[-1] if row[-1] else "-"
        row = row[:-2] + (type_1, type_2)
        print("| {:<4} | {:<25} | {:<11} | {:<3} | {:<3} | {:<3} | {:<6} | {:<6} | {:<3} | {:<3} | {:<6} | {:<8} | {:<8} |".format(*row))
    print("+------+---------------------------+-------------+-----+-----+-----+--------+--------+-----+-----+--------+----------+----------+")

#function to select name and type
def select_name_type():
#creating func
    with sqlite3.connect(DATABASE) as conn:
        #with statement
        cur = conn.cursor()
        #creating cursor
        if not cur:
            raise Exception('Connection failed.')
        else: print("Connected")
        sql = '''
        SELECT p.id, p.name, t1.name, t2.name FROM pokemon p 
        JOIN type as t1 on p.type_1 = t1.type_id 
        LEFT JOIN type as t2 on p.type_2 = t2.type_id;
        '''
        #writing query
        cur.execute(sql)
        results = cur.fetchall()
        #executing and fetching
        print("+------+-----------------+---------------+---------------+")
        print("|  ID  |      Name       |    Type 1     |    Type 2     |")
        print("+------+-----------------+---------------+---------------+")
        for poke in results:
            id_, name, type_1, type_2 = poke
            type_1 = type_1 if type_1 else "-"
            type_2 = type_2 if type_2 else "-"
            print(f"| {id_:<4} | {name:<25} | {type_1:<9} | {type_2:<9} |")
        print("+------+---------------------------+-----------+-----------+")
        #printing results


#main code
def main():
    admin = False
    while True:
        print("\nWhat would you like to do?")
        print("1. Create a new table(Admin Only)")
        print("2. Add data to a table")
        print("3. Fetch all data")
        print("4. Select name and type(to be refined)")
        print("5. Custom query(Admin Only)")
        print("6. SANDSLASH!")
        print("7. Exit")
        if not admin:
            print("0. Admin Login\n")
        userinput = input('')

        if userinput == '0':
            admin = admin_login(admin)
            
        elif userinput == '1' and admin:
            print("1. Create table manually.")
            print("2. Create table using query.")
            print("3. Go back.")
            input1 = input('')
            while True:
                if input1 == '1':
                    table, columns = ask_for_table_input()
                    if table is None or columns is None:
                        break
                    create_table(DATABASE, table, columns)
                    break
                elif input1 == '2':
                    print_databaseinfo()
                    query = input("What query would you like to do?")
                    custom_query(query)
                    break
                elif input1 == '3':
                    break
                else:
                    print("Invalid input. Please enter a number between 1 and 3.")
        elif userinput == '1' and not admin:
            admin = admin_login(admin)
            if admin:
                print("1. Create table manually.")
                print("2. Create table using query.")
                print("3. Go back.")
                input1 = input('')
                while True:
                    if input1 == '1':
                        table, columns = ask_for_table_input()
                        if table is None or columns is None:
                            break
                        create_table(DATABASE, table, columns)
                        break
                    elif input1 == '2':
                        print_databaseinfo()
                        query = input("What query would you like to do?")
                        custom_query(query)
                        break
                    elif input1 == '3':
                        break
                    else:
                        print("Invalid input. Please enter a number between 1 and 3.")

        elif userinput == '2' and admin:
            add_data()

        elif userinput == '2' and not admin:
            admin = admin_login(admin)
            if admin:
                pass

        elif userinput == '3':
            fetch_all_data()

        elif userinput == '4':
            select_name_type()

        elif userinput == '5' and admin:
                print_databaseinfo()
                query = input("What query would you like to do?")
                custom_query(query)
        elif userinput == '5' and not admin:
            admin = admin_login(admin)
            if admin:
                print_databaseinfo()
                query = input("What query would you like to do?")
                custom_query(query)


        elif userinput == '6':
            sandslash()
        elif userinput == '7':
            print("Exited.")
            break
        else:
            print("Invalid input. Please enter a number between 1 and 8.")
if __name__ == "__main__":
    main()

